package basicMath;
import java.util.Arrays;
import edu.princeton.cs.algs4.StdIn;
import edu.princeton.cs.algs4.StdOut;
public class MyMath {
	/*
	 * 求两个数的最大公约数,采用欧几里得辗转相除法
	 * greatest common divisor
	 */
    public static int gcd(int p, int q){
    	if(q==0) return p;
    	int r = p % q;
    	return gcd(q,r);
    }
   
   /*
    *  二分查找，循环实现
    */
   public static int binarySearch (int key, int[] a){
	   int hi =a.length -1;
	   int lo = 0;
	   while (lo < hi){
		   int mid =lo + (hi-lo)/2;
		   if(key < a[mid]){
			  hi = mid -1;
		   }else if(key > a[mid]){
			  lo = mid+1; 
		   }else{
			   return mid;
		   };
	   }
	   return -1;
   }
   
   public static int binarySearchR(int key, int[] a){
	   return binarySearchR (key,a, 0, a.length - 1);//lo low, hi hight
   }
   
   public static int binarySearchR(int key,int[] a, int lo, int hi){
	   int mid = (lo + hi) / 2;
	   if(key < a[mid]){
		   return binarySearchR(key,a, lo, mid-1);
	   }else if(key > a[mid]){
		   return binarySearchR(key,a, lo + 1, hi);
	   }else{
		   return mid;
	   }
   }
   
   public static void binarySearchRTest(){
	   int[] whitelist = {10,9,6,56,23};
	   int key = 56;
	   System.out.print(binarySearchR(key, whitelist));
   }
   
   public static void binarySearchTest(){
	   int[] whitelist = {10,9,6,56,23};
	   Arrays.sort(whitelist);
	   int key = 7;
	   //如果找不到的话，则返回该数字
	   
	   if(binarySearch(key,whitelist)== -1)
	   System.out.println(key);
   }
   
   public static double max (double[] a){
	   int N = a.length;
	   double max = a[0];
	   for(int i = 0; i < N; i++){
		   if(a[i] > max) max = a[i];
	   }
	   return max;	   
   }
   
   public static void maxTest (){
	   double[] a = {10,9,6,56,23};
	   System.out.print(max(a));
   }
   
   public static double average (double[] a){
	   int N = a.length;
	   double sum = 0.0;
	   for(int i=0; i < N; i++){
		   sum += a[i];
	   }
	   double average = sum / N;
	   return average;
   }
   
   public static void averageTest(){
	   double[] a = {10,9,6,56,23};
	   System.out.print(average(a));
	   //test to be right 
   }
   
   /*
    * 将一个数组颠倒顺序
    */
   public static double[] reverseArray(double[] a){
	  int N = a.length;
	  for(int i =0; i < N/2 ; i++){
		  double tmp = a[i];
		  a[i] = a[N-1-i];
		  a[N-1-i] = tmp;
	  }
	  return a;
   }
   
   public static void reverseArrayTest(){
	   double[] a = {10,9,6,56,23};
	   //reverse the array
	   double[] ra = reverseArray(a);
	   System.out.print(Arrays.toString(ra));
   }
/*
 *两个矩阵相乘,要求a的行数等于b的列数
 */
   public static double[][] matrixTimes(double[][] a, double[][] b){
	   int N = a.length;
	   double[][] c = new double[N][N];
	   for(int i = 0; i < N; i++){
		   for(int j = 0; j<N; j++){
			   for(int k = 0; k < N; k++){
				   c[i][j] += a[i][k] * b[k][j];
			   }
		   }
	   }	   
	   return c;
   }
   
   public static void maxtrixTimesTest (){
	   double[][] a = {{10,9,6},{10,9,6},{10,9,6}};
	   double[][] b = {{10,9,6},{10,9,6},{10,9,6}};
	   int N = a.length;
	   double[][] c = new double[N][N];
	   c = matrixTimes(a,b);
	   printMatrix(c);
   }
 
/*
 * 打印一个二维矩阵   
 */
   
   public static void printMatrix (double[][] a){
	  //a 的行数
	   int N = a.length;
	   //a 的列数
	   int M = a[0].length;
	   for(int i = 0; i <N; i++){
		   for (int j = 0; j <M; j++) {
			   System.out.print(a[i][j]);
			   System.out.print(" ");
		   }
		System.out.print("\n");   
	   }
   }
 
/*
 * 采用牛顿法开平方,
 * （1）从任意一个值t开始猜测，本利中从被开方数自身开始猜测，
 * （2）若猜测的结果足够接近平方根，则返回t
 * （3）如猜测不准确，则用c/t和t的平均值作为新的猜测值，因为两个数中，一个小于确切的平方根，一个大于确切的平方根。选择二者的平均值就会得到更加逼近的答案
 * t =( t + t )/2= (c/t +t)/2;  
 */
   public static double sqrt (double c){
	   //数据类常量是在包装类型中定义的
	  if(c < 0) return Double.NaN;
	  double t  = c;
	  double err = 1e-15;
	  while (Math.abs(t - c/t) > err*t){
		  t = (c/t + t)/2;
	  }
	  return t;
   }

   
   
   public static void sqrtTest (){
	   double c = 56.73;
	   System.out.print(sqrt(c));
   }

   public static void StdInTest (){
	   double sum = 0.0;
	   int cnt = 0;
	   while (!StdIn.isEmpty()){
		   //读取一个数并计算累计之和
		   sum += StdIn.readDouble();
		   cnt++;
	   }
	   double avg = sum /cnt;
	   StdOut.printf("Average is %.5f\n", avg);
   }
   
   
   
   
   
   
   public static void main (String[] args){

//	   binarySearchRTest();
//	   sqrtTest();
//	   maxtrixTimesTest();
//	   reverseArrayTest();
//	   averageTest();
//	   binarySearchTest();
//	   maxTest();
	   
	   //@TODO  2016-10-28
   }
   

}

